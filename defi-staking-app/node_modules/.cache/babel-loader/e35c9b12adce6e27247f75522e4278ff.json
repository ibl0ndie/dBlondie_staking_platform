{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Navbar from './components/navbar';\nimport Web3 from 'web3';\nimport Tether from './truffle_abis/Tether.json';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }() //load our web3\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                //if our window detect ethereum\n                window.web3 = new Web3(window.ethereum); //then we create a instance of web3\n\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('no ethereum detected! check out metamask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() //access to account\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                }); //set network file to 5777\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                //console.log(networkID,'network id')\n                //load tether contract and set to the state of tether\n                //if we can get the network so we can bring in contract for the network\n                tetherData = Tether.networks[networkId]; //tetherdata is gonna be networkid\n\n                if (!tetherData) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                }); //tether is the permenant info of the contract\n\n                _context3.next = 14;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 14:\n                tetherBalance = _context3.sent;\n                // call cuz of methods\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log(tetherBalance);\n                _context3.next = 20;\n                break;\n\n              case 19:\n                window.alert('tether contract not deployed to detected network');\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralbank: {},\n      tetherBalance: '0',\n      rewardBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/merlin/Desktop/defi-staking-app-starter/defi-staking-app-starter/src/App.js"],"names":["React","Component","Navbar","Web3","Tether","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","tetherData","networks","tether","Contract","abi","address","methods","balanceOf","state","call","tetherBalance","toString","console","log","props","rwd","decentralbank","rewardBalance","stakingBalance","loading"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;;IAGMC,G;;;;;;;;;;;;uBAGQ,KAAKC,QAAL,E;;;;uBACA,KAAKC,kBAAL,E;;;;;;;;;;;;;;;QAGV;;;;;;;;;;qBAEOC,MAAM,CAACC,Q;;;;;AAAY;AAClBD,gBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACC,QAAhB,CAAd,C,CAAwC;;;uBAClCD,MAAM,CAACC,QAAP,CAAgBE,MAAhB,E;;;;;;;AACH,oBAAGH,MAAM,CAACE,IAAV,EAAgB;AACnBF,kBAAAA,MAAM,CAACE,IAAP,GAAc,IAAIP,IAAJ,CAASK,MAAM,CAACE,IAAP,CAAYE,eAArB,CAAd;AACH,iBAFM,MAEA;AACHJ,kBAAAA,MAAM,CAACK,KAAP,CAAa,2CAAb;AACH;;;;;;;;;;;;;;;QAGL;;;;;;;;;;;AAEUH,gBAAAA,I,GAAOF,MAAM,CAACE,I;;uBACEA,IAAI,CAACI,GAAL,CAASC,WAAT,E;;;AAAhBC,gBAAAA,O;AACN,qBAAKC,QAAL,CAAc;AAACD,kBAAAA,OAAO,EAAGA,OAAO,CAAC,CAAD;AAAlB,iBAAd,E,CAEA;;;uBACwBN,IAAI,CAACI,GAAL,CAASI,GAAT,CAAaC,KAAb,E;;;AAAlBC,gBAAAA,S;AACN;AAEA;AACA;AACMC,gBAAAA,U,GAAajB,MAAM,CAACkB,QAAP,CAAgBF,SAAhB,C,EAA2B;;qBAC3CC,U;;;;;AACOE,gBAAAA,M,GAAS,IAAIb,IAAI,CAACI,GAAL,CAASU,QAAb,CAAsBpB,MAAM,CAACqB,GAA7B,EAAmCJ,UAAU,CAACK,OAA9C,C;AACf,qBAAKT,QAAL,CAAc;AAACM,kBAAAA,MAAM,EAANA;AAAD,iBAAd,E,CAAwB;;;uBACEA,MAAM,CAACI,OAAP,CAAeC,SAAf,CAAyB,KAAKC,KAAL,CAAWb,OAApC,EAA6Cc,IAA7C,E;;;AAAtBC,gBAAAA,a;AAA0E;AAC9E,qBAAKd,QAAL,CAAc;AAACc,kBAAAA,aAAa,EAAGA,aAAa,CAACC,QAAd;AAAjB,iBAAd;AACAC,gBAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;;;;;AAEAvB,gBAAAA,MAAM,CAACK,KAAP,CAAa,kDAAb;;;;;;;;;;;;;;;;;;AAIR,eAAYsB,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6EAAMA,KAAN;AACA,UAAKN,KAAL,GAAa;AACTb,MAAAA,OAAO,EAAG,KADD;AAETO,MAAAA,MAAM,EAAG,EAFA;AAGTa,MAAAA,GAAG,EAAG,EAHG;AAITC,MAAAA,aAAa,EAAG,EAJP;AAKTN,MAAAA,aAAa,EAAG,GALP;AAMTO,MAAAA,aAAa,EAAG,GANP;AAOTC,MAAAA,cAAc,EAAG,GAPR;AAQTC,MAAAA,OAAO,EAAG;AARD,KAAb;AAFe;AAalB;;;;6BAEQ;AACL,0BACI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKX,KAAL,CAAWb,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGH;;;;EA9Daf,S;;AAiElB,eAAeI,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport Navbar from './components/navbar';\r\nimport Web3 from 'web3';\r\nimport Tether from './truffle_abis/Tether.json';\r\n\r\n\r\nclass App extends Component {\r\n\r\n    async UNSAFE_componentWillMount() { //calls before render\r\n        await this.loadWeb3();\r\n        await this.loadBlockchainData();\r\n    }\r\n\r\n    //load our web3\r\n    async loadWeb3() {\r\n        if(window.ethereum) { //if our window detect ethereum\r\n            window.web3 = new Web3(window.ethereum) //then we create a instance of web3\r\n            await window.ethereum.enable() //and enable it\r\n        } else if(window.web3) {\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        } else {\r\n            window.alert('no ethereum detected! check out metamask!')\r\n        }\r\n    }\r\n\r\n    //access to account\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        const account = await web3.eth.getAccounts()\r\n        this.setState({account : account[0]})\r\n\r\n        //set network file to 5777\r\n        const networkId = await web3.eth.net.getId()\r\n        //console.log(networkID,'network id')\r\n\r\n        //load tether contract and set to the state of tether\r\n        //if we can get the network so we can bring in contract for the network\r\n        const tetherData = Tether.networks[networkId] //tetherdata is gonna be networkid\r\n        if(tetherData) {\r\n            const tether = new web3.eth.Contract(Tether.abi , tetherData.address)\r\n            this.setState({tether}) //tether is the permenant info of the contract\r\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call() // call cuz of methods\r\n            this.setState({tetherBalance : tetherBalance.toString()})\r\n            console.log(tetherBalance)\r\n        } else {\r\n            window.alert('tether contract not deployed to detected network')\r\n        }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account : '0x0',\r\n            tether : {},\r\n            rwd : {},\r\n            decentralbank : {},\r\n            tetherBalance : '0',\r\n            rewardBalance : '0',\r\n            stakingBalance : '0',\r\n            loading : true,\r\n\r\n        }\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <Navbar account={this.state.account} />\r\n        );\r\n    }\r\n}\r\n \r\nexport default App;"]},"metadata":{},"sourceType":"module"}