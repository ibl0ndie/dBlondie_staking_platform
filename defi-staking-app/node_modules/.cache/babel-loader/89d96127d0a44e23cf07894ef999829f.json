{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\merlin\\\\Desktop\\\\defi-staking-app-starter\\\\defi-staking-app-starter\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Navbar from './components/navbar';\nimport Web3 from 'web3';\nimport Tether from './truffle_abis/Tether.json';\nimport RWD from './truffle_abis/RWD.json';\nimport DecentralBank from './truffle_abis/DecentralBank.json';\nimport Main from './components/main';\nimport ParticleSetting from './components/particlesetting';\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"UNSAFE_componentWillMount\",\n    value: function () {\n      var _UNSAFE_componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function UNSAFE_componentWillMount() {\n        return _UNSAFE_componentWillMount.apply(this, arguments);\n      }\n\n      return UNSAFE_componentWillMount;\n    }() //load our web3\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                //if our window detect ethereum\n                window.web3 = new Web3(window.ethereum); //then we create a instance of web3\n\n                _context2.next = 4;\n                return window.eth_requestAccounts;\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('no ethereum detected! check out metamask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() //access to account\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, account, networkId, tetherData, tether, tetherBalance, rwdData, rwd, rewardBalance, decentralbankData, decentralbank, stakingBalance;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                account = _context3.sent;\n                this.setState({\n                  account: account[0]\n                }); //set network file to 5777\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                console.log(networkId, 'network id'); //load tether contract and set to the state of tether\n                //if we can get the network so we can bring in contract for the network\n\n                tetherData = Tether.abi[networkId]; //tetherdata is gonna be networkid\n\n                console.log(tetherData, 'tetherData');\n\n                if (!tetherData) {\n                  _context3.next = 21;\n                  break;\n                }\n\n                tether = new web3.eth.Contract(Tether.abi, tetherData.address);\n                this.setState({\n                  tether: tether\n                }); //tether is the permenant info of the contract\n\n                _context3.next = 16;\n                return tether.methods.balanceOf(this.state.account).call();\n\n              case 16:\n                tetherBalance = _context3.sent;\n                // call cuz of methods\n                this.setState({\n                  tetherBalance: tetherBalance.toString()\n                });\n                console.log(tetherBalance);\n                _context3.next = 22;\n                break;\n\n              case 21:\n                window.alert('Error! Tether contract was not deployed - no detected network!');\n\n              case 22:\n                //loading RWD contract\n                rwdData = RWD.networks[networkId]; //tetherdata is gonna be networkid\n\n                console.log(RWD.networks, 'rwdData');\n\n                if (!rwdData) {\n                  _context3.next = 34;\n                  break;\n                }\n\n                rwd = new web3.eth.Contract(RWD.abi, RWD.address);\n                this.setState({\n                  rwd: rwd\n                }); //tether is the permenant info of the contract\n\n                _context3.next = 29;\n                return rwd.methods.balanceOf(this.state.account).call();\n\n              case 29:\n                rewardBalance = _context3.sent;\n                // call cuz of methods\n                this.setState({\n                  rewardBalance: rewardBalance.toString()\n                });\n                console.log(rewardBalance);\n                _context3.next = 35;\n                break;\n\n              case 34:\n                window.alert('Error! rwd contract was not deployed - no detected network!');\n\n              case 35:\n                //loading DecentralBank contract\n                decentralbankData = DecentralBank.networks[networkId]; //tetherdata is gonna be networkid\n\n                console.log(decentralbankData, 'decentralbankData');\n\n                if (!decentralbankData) {\n                  _context3.next = 47;\n                  break;\n                }\n\n                decentralbank = new web3.eth.Contract(decentralbank.abi, decentralbank.address);\n                this.setState({\n                  decentralbank: decentralbank\n                }); //tether is the permenant info of the contract\n\n                _context3.next = 42;\n                return decentralbank.methods.stakingBalance(this.state.account).call();\n\n              case 42:\n                stakingBalance = _context3.sent;\n                // call cuz of methods\n                this.setState({\n                  stakingBalance: stakingBalance.toString()\n                });\n                console.log(stakingBalance);\n                _context3.next = 48;\n                break;\n\n              case 47:\n                window.alert('Error! decentralbank contract was not deployed - no detected network!');\n\n              case 48:\n                this.setState({\n                  loading: false\n                });\n\n              case 49:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: '0x0',\n      tether: {},\n      rwd: {},\n      decentralbank: {},\n      tetherBalance: '0',\n      rewardBalance: '0',\n      stakingBalance: '0',\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"App\",\n        style: {\n          position: 'relative'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: 'absolute'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(ParticleSetting, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }\n      })), /*#__PURE__*/React.createElement(Navbar, {\n        account: this.state.account,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: '600px',\n          minHeight: '600px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Main, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 33\n        }\n      }))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/merlin/Desktop/defi-staking-app-starter/defi-staking-app-starter/src/App.js"],"names":["React","Component","Navbar","Web3","Tether","RWD","DecentralBank","Main","ParticleSetting","App","loadWeb3","loadBlockchainData","window","ethereum","web3","eth_requestAccounts","currentProvider","alert","eth","getAccounts","account","setState","net","getId","networkId","console","log","tetherData","abi","tether","Contract","address","methods","balanceOf","state","call","tetherBalance","toString","rwdData","networks","rwd","rewardBalance","decentralbankData","decentralbank","stakingBalance","loading","props","position","maxWidth","minHeight"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Navbar from './components/navbar';\r\nimport Web3 from 'web3';\r\nimport Tether from './truffle_abis/Tether.json';\r\nimport RWD from './truffle_abis/RWD.json';\r\nimport DecentralBank from './truffle_abis/DecentralBank.json';\r\nimport Main from './components/main';\r\nimport ParticleSetting from './components/particlesetting';\r\n\r\n\r\nclass App extends Component {\r\n\r\n    async UNSAFE_componentWillMount() { //calls before render\r\n        await this.loadWeb3();\r\n        await this.loadBlockchainData();\r\n    }\r\n\r\n    //load our web3\r\n    async loadWeb3() {\r\n        if(window.ethereum) { //if our window detect ethereum\r\n            window.web3 = new Web3(window.ethereum) //then we create a instance of web3\r\n            await window.eth_requestAccounts //and enable it\r\n        } else if(window.web3) {\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        } else {\r\n            window.alert('no ethereum detected! check out metamask!')\r\n        }\r\n    }\r\n\r\n    //access to account\r\n    async loadBlockchainData() {\r\n        const web3 = window.web3\r\n        const account = await web3.eth.getAccounts()\r\n        this.setState({account : account[0]})\r\n\r\n        //set network file to 5777\r\n        const networkId = await web3.eth.net.getId()\r\n        console.log(networkId,'network id')\r\n\r\n        //load tether contract and set to the state of tether\r\n        //if we can get the network so we can bring in contract for the network\r\n        const tetherData = Tether.abi[networkId] //tetherdata is gonna be networkid\r\n        console.log(tetherData,'tetherData')\r\n        if(tetherData) {\r\n            const tether = new web3.eth.Contract(Tether.abi , tetherData.address)\r\n            this.setState({tether}) //tether is the permenant info of the contract\r\n            let tetherBalance = await tether.methods.balanceOf(this.state.account).call() // call cuz of methods\r\n            this.setState({tetherBalance : tetherBalance.toString()})\r\n            console.log(tetherBalance)\r\n        } else {\r\n            window.alert('Error! Tether contract was not deployed - no detected network!')\r\n        }\r\n\r\n        //loading RWD contract\r\n        const rwdData = RWD.networks[networkId] //tetherdata is gonna be networkid\r\n        console.log(RWD.networks,'rwdData')\r\n        if(rwdData) {\r\n            const rwd = new web3.eth.Contract(RWD.abi , RWD.address)\r\n            this.setState({rwd}) //tether is the permenant info of the contract\r\n            let rewardBalance = await rwd.methods.balanceOf(this.state.account).call() // call cuz of methods\r\n            this.setState({rewardBalance : rewardBalance.toString()})\r\n            console.log(rewardBalance)\r\n        } else {\r\n            window.alert('Error! rwd contract was not deployed - no detected network!')\r\n        }\r\n\r\n        //loading DecentralBank contract\r\n        const decentralbankData = DecentralBank.networks[networkId] //tetherdata is gonna be networkid\r\n        console.log(decentralbankData,'decentralbankData')\r\n        if(decentralbankData) {\r\n            const decentralbank = new web3.eth.Contract(decentralbank.abi , decentralbank.address)\r\n            this.setState({decentralbank}) //tether is the permenant info of the contract\r\n            let stakingBalance = await decentralbank.methods.stakingBalance(this.state.account).call() // call cuz of methods\r\n            this.setState({stakingBalance : stakingBalance.toString()})\r\n            console.log(stakingBalance)\r\n        } else {\r\n            window.alert('Error! decentralbank contract was not deployed - no detected network!')\r\n        }\r\n        this.setState({loading : false})\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account : '0x0',\r\n            tether : {},\r\n            rwd : {},\r\n            decentralbank : {},\r\n            tetherBalance : '0',\r\n            rewardBalance : '0',\r\n            stakingBalance : '0',\r\n            loading : true,\r\n\r\n        }\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div className='App' style={{position:'relative'}}>\r\n                <div style={{position:'absolute'}}>\r\n                    <ParticleSetting />\r\n                </div>\r\n                <Navbar account={this.state.account} />\r\n                <div className='container-fluid mt-5'>\r\n                    <div className='row'>\r\n                        <main role='main' className='col-lg-12 ml-auto mr-auto' style={{maxWidth:'600px', minHeight:'600px'}}>\r\n                            <div>\r\n                                <Main />\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default App;"]},"metadata":{},"sourceType":"module"}